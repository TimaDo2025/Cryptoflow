import requests
import time
import logging
from statistics import mean, stdev

ETHERSCAN_API_KEY = "your_etherscan_api_key"
ETHERSCAN_URL = "https://api.etherscan.io/api"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename="anomalies.log", level=logging.INFO, format="%(asctime)s - %(message)s")

# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ n —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
TX_HISTORY_LIMIT = 50
tx_values = []

def get_latest_transactions(address="0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞."""
    params = {
        "module": "account",
        "action": "txlist",
        "address": address,
        "startblock": 0,
        "endblock": 99999999,
        "sort": "desc",
        "apikey": ETHERSCAN_API_KEY,
    }
    response = requests.get(ETHERSCAN_URL, params=params)
    data = response.json()
    if data["status"] == "1":
        return data["result"][:10]
    return []

def detect_anomaly(value_ether):
    """–ü—Ä–æ—Å—Ç–∞—è –∞–Ω–æ–º–∞–ª–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    global tx_values
    if len(tx_values) < TX_HISTORY_LIMIT:
        tx_values.append(value_ether)
        return False

    avg = mean(tx_values)
    deviation = stdev(tx_values)
    threshold = avg + 3 * deviation

    is_anomaly = value_ether > threshold
    tx_values.pop(0)
    tx_values.append(value_ether)

    return is_anomaly

def monitor():
    print("‚õìÔ∏è  Monitoring Ethereum transaction flow for anomalies...")
    seen_tx = set()
    while True:
        txs = get_latest_transactions()
        for tx in txs:
            if tx["hash"] in seen_tx:
                continue
            seen_tx.add(tx["hash"])

            value_ether = int(tx["value"]) / 1e18
            if detect_anomaly(value_ether):
                msg = f"üö® Anomaly detected! TxHash: {tx['hash']} Value: {value_ether:.4f} ETH"
                print(msg)
                logging.info(msg)

        time.sleep(15)  # 15 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

if __name__ == "__main__":
    monitor()
